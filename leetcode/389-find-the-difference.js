// https://leetcode.com/problems/find-the-difference/description/
// 389. Find the Difference
// You are given two strings s and t.

// String t is generated by random shuffling string s and then add one more letter at a random position.

// Return the letter that was added to t.

 

// Example 1:

// Input: s = "abcd", t = "abcde"
// Output: "e"
// Explanation: 'e' is the letter that was added.
// Example 2:

// Input: s = "", t = "y"
// Output: "y"
 

// Constraints:

// 0 <= s.length <= 1000
// t.length == s.length + 1
// s and t consist of lowercase English letters.


// approach: create a counter for each character in s and t
// if the character is from t, we add it to the counter hashmap
// if the character is from s, we subtract it from the counter hashmap
// if the counter is not 0, return the character
// time complexity: O(n) where n is the length of t
// space complexity: O(1) or O(t) because the counter hashmap will have at most 26 characters
/**
 * @param {string} s
 * @param {string} t
 * @return {character}
 */
var findTheDifference = function(s, t) {
    let counter = new Map();

    for (let i = 0; i < t.length; i++) {
        counter.set(t[i], (counter.get(t[i]) || 0) + 1);
        counter.set(s[i], (counter.get(s[i]) || 0) - 1);
    }

    for (let item of counter[Symbol.iterator]()) {
        if (item[1] !== 0) return item[0];
    }

    return ""
};

// without using a hashmap, using js built-in functions:
// approach: start by removing all the characters in s from t   
// return the first character of t
// time complexity: O(n ** 2) because replace is O(n) and we are calling it n times
// space complexity: O(1)
var findTheDifference = function(s, t) {
    for (let letter of s)
        t = t.replace(letter, '');
    return t;
};